"""
Django settings for newproject project.

This file configures all the settings for your Django backend, including database, installed apps, middleware, static files, and more.

- For local development, it uses SQLite by default (easy, no setup required).
- For production (e.g., Render + Amazon RDS), it uses PostgreSQL if the required environment variables are set (secure, scalable, cloud-ready).
- CORS and REST framework are enabled for API and frontend communication.
- All sensitive/production settings (like SECRET_KEY, database credentials) should be set using environment variables in production.

Generated by 'django-admin startproject' using Django 5.2.1.
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# In production, set this with an environment variable (SECRET_KEY) for security.
SECRET_KEY = 'django-insecure-q@e58obh#ae%904$je0&w_f5vnl%w_w2v10fda2g3*o2m-9_qi'

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG=False in production for security and performance.
DEBUG = True  # Set to False in production!

# Hosts allowed to access this Django app
# Add your deployed backend domain, localhost, and 127.0.0.1 for local dev.
ALLOWED_HOSTS = [
    'reactjs-django-simple-crud-book-app.onrender.com',  # Render backend URL
    'localhost',  # Local dev
    '127.0.0.1',  # Local dev
]

# Application definition
# List of all Django and third-party apps used in this project.
INSTALLED_APPS = [
    'django.contrib.admin',           # Django admin site
    'django.contrib.auth',            # Authentication system
    'django.contrib.contenttypes',    # Content type system
    'django.contrib.sessions',        # Session framework
    'django.contrib.messages',        # Messaging framework
    'django.contrib.staticfiles',     # Static file management
    'api',            # Custom app for API endpoints (your book API)
    'rest_framework', # Django REST framework for building APIs
    'corsheaders',    # Handles CORS for frontend-backend communication
]

# Middleware are hooks into Django's request/response processing.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Enables CORS
]

ROOT_URLCONF = 'newproject.urls'  # Main URL config file

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'newproject.wsgi.application'  # WSGI entry point for deployment

# Database configuration
# Prefer external (cloud/production) database if available, otherwise use SQLite for local development
# - On Render (production): Uses Amazon RDS PostgreSQL if RDS_* env vars are set
# - On local dev: Falls back to SQLite if not
# This allows you to develop easily on your laptop, but use a real cloud database in production.
if os.environ.get('RDS_DB_NAME') and os.environ.get('RDS_HOSTNAME'):
    # Use Amazon RDS/PostgreSQL if all required env vars are set
    # These variables are set in the Render dashboard, not in your code!
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('RDS_DB_NAME'),
            'USER': os.environ.get('RDS_USERNAME'),
            'PASSWORD': os.environ.get('RDS_PASSWORD'),
            'HOST': os.environ.get('RDS_HOSTNAME'),
            'PORT': os.environ.get('RDS_PORT', '5432'),
        }
    }
else:
    # Fallback to SQLite for local development (no setup required)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation (recommended for production)
# These validators help enforce strong passwords for admin and users.
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
# Set your language and timezone here.
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# Where Django will look for static files (e.g., CSS)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
# Only allow requests from your deployed frontend and local dev
# This is important for security: only your frontend can talk to your backend API.
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "https://reactjs-django-test-app.vercel.app",  # Production frontend
    "http://localhost:5173",                      # Local frontend
]

# ---
# Quick tips for new users:
# - Never commit real secrets or production credentials to GitHub.
# - Always use environment variables for sensitive info in production.
# - For local dev, you can use SQLite and DEBUG=True for easy setup.
# - For deployment, set DEBUG=False, use strong SECRET_KEY, and configure allowed hosts and CORS properly.
# - If you see database connection errors locally, you're probably missing RDS env varsâ€”just use SQLite for local dev!
